// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

//basic user model
model User {
  id             String    @id @default(cuid())
  email          String    @unique
  control_number String    @unique
  role           String
  fullName       String
  // location  String
  password       String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  status         String    @default("active") //for soft delete
  //relation
  session        Session[]
  log            Log[]
  locationId     String //locationId
  location       Location  @relation(fields: [locationId], references: [id])
  item           Item[]
  entry          Entryes[]
  outs           Outs[]
}

model Responsible {
  id        String   @id @default(cuid())
  fullName  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  status    String   @default("active") //for soft delete
  //relation
  Loans     Loans[]
}

model Loans {
  id            String      @id @default(cuid())
  //
  responsibleId String
  responsible   Responsible @relation(fields: [responsibleId], references: [id])
  //
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  status        String      @default("active") //for soft delete

  item Item[]
}

//session of user
model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String
  createdAt DateTime @default(now())
  expiresAt DateTime
  //relation
  user      User     @relation(fields: [userId], references: [id])
}

//log history
model Log {
  id        String   @id @default(cuid())
  userId    String
  action    String
  createdAt DateTime @default(now())
  //relation
  user      User     @relation(fields: [userId], references: [id])
}

model Location {
  id        String      @id @default(cuid())
  name      String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  status    String      @default("active")
  user      User[]
  Item      Item[]
  Ubication Ubication[]
}

model Ubication {
  id         String   @id @default(cuid())
  name       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  status     String   @default("active")
  locationId String // Clave foránea
  location   Location @relation(fields: [locationId], references: [id])
  items      Item[]
}

model Category {
  id            String   @id @default(cuid())
  partidaNumber String
  name          String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  status        String   @default("active")
  item          Item[]
}

model Unit {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  status    String   @default("active")
  item      Item[]
}

model ItemType {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  status    String   @default("active")
  item      Item[]
}

model Item {
  id          String @id @default(cuid())
  barCode     String @unique
  name        String
  description String
  quantity    Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  status    String   @default("active")

  unitId      String //foreign key
  unit        Unit      @relation(fields: [unitId], references: [id])
  typeId      String //foreign key
  type        ItemType  @relation(fields: [typeId], references: [id])
  categoryId  String //foreign key
  category    Category  @relation(fields: [categoryId], references: [id])
  locationId  String //foreign key
  location    Location  @relation(fields: [locationId], references: [id])
  userId      String //foreign key
  user        User      @relation(fields: [userId], references: [id])
  ubicationId String //foreign key
  ubication   Ubication @relation(fields: [ubicationId], references: [id])

  /// Relación uno a muchos con las entradas
  entry Entryes[] // Relación uno a muchos con las entradas
  /// Relación uno a muchos con las salidas
  outs  Outs[] // Relación uno a muchos con las salidas
  loan  Loans[] // Relación uno a muchos con los préstamos
}

model Entryes {
  id        String   @id @default(cuid())
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  status    String   @default("active")
  itemId    String
  item      Item     @relation(fields: [itemId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}

model Outs {
  id        String   @id @default(cuid())
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  status    String   @default("active")
  itemId    String
  item      Item     @relation(fields: [itemId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}
